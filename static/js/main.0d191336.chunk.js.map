{"version":3,"sources":["store/reducers/treeReducer.ts","store/reducers/types.ts","store/reducers/elementReducer.ts","store/Store.ts","mockPage.tsx","components/MyComponent.tsx","eventHandlers/alert.ts","pageRenderer/RenderFactory.tsx","store/reducers/actions.ts","pageRenderer/PageLoader.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["treeReducer","state","action","type","mapper","e","children","key","map","payload","elementReducer","reducer","s","element","value","newS","reduce","rootReducer","combineReducers","tree","elements","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","href","onClick","name","parameters","message","MyComponent","alert","mapToHandler","mapToComponent","factory","treeNode","nodeMap","node","attributesAndProps","Object","keys","test","handler","console","warn","child","React","createElement","setElements","PageLoader","useState","loading","setLoading","dispatch","useDispatch","useSelector","useEffect","Promise","resolve","then","result","catch","text","App","store","Store","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.0d191336.chunk.js","sourcesContent":["import {\n  Element, SET_ELEMENTS, TreeState, TreeNode, ElementActionTypes,\n} from './types';\n\nconst treeReducer = (state: TreeState = [], action: ElementActionTypes) => {\n  switch (action.type) {\n    case SET_ELEMENTS: {\n      const mapper = (e: Element): (TreeNode | string) => {\n        if (typeof e === 'string') { return e; }\n        if (!e.children) { return { key: e.key, type: e.type }; }\n        return {\n          key: e.key,\n          type: e.type,\n          children: e.children.map(mapper),\n        };\n      };\n      return action.payload.map(mapper);\n    }\n    default: return state;\n  }\n};\n\nexport default treeReducer;\n","// ======== state interface ========\nexport type TreeNode = {\n  key: string;\n  type: string;\n  children?: TreeNode[];\n} | string;\n\nexport type TreeState = TreeNode[];\n\nexport interface Handler<P = any> {\n  name: string;\n  parameters: P;\n}\n\nexport interface ElementNode {\n  key: string; // TODO: rethink global state\n  [otherProperty: string]: Handler | any;\n}\n\nexport interface ElementState {\n  [key: string]: ElementNode;\n}\n\n// ======== Payload interface ========\nexport interface ElementObject {\n  type: string;\n  key: string; // TODO: rethink global state\n  children?: Element[];\n  [otherProperty: string]: any;\n}\n\nexport type Element = ElementObject | string;\n\nexport const SET_ELEMENTS = 'SET_ELEMENTS';\n\ninterface SetElementsAction {\n  type: typeof SET_ELEMENTS;\n  payload: Element[];\n}\n\nexport type ElementActionTypes = SetElementsAction;\n","import {\n  Element, SET_ELEMENTS, ElementState, ElementActionTypes,\n} from './types';\n\nconst elementReducer = (state: ElementState = {}, action: ElementActionTypes) => {\n  switch (action.type) {\n    case SET_ELEMENTS: {\n      const reducer = (s: ElementState, element: Element): ElementState => {\n        if (typeof element === 'string') {\n          return s;\n        }\n        const { children, ...value } = element;\n        const newS = {\n          ...s,\n          [element.key]: value,\n        };\n        if (!children) { return newS; }\n        return children.reduce(reducer, newS);\n      };\n      return action.payload.reduce(reducer, state);\n    }\n    default: return state;\n  }\n};\n\nexport default elementReducer;\n","import {\n  createStore, combineReducers, compose,\n} from 'redux';\nimport treeReducer from './reducers/treeReducer';\nimport { TreeState, ElementState } from './reducers/types';\nimport elementReducer from './reducers/elementReducer';\n\nexport interface State {\n  tree: TreeState;\n  elements: ElementState;\n}\n\nexport const rootReducer = combineReducers<State>({\n  tree: treeReducer,\n  elements: elementReducer,\n});\n\nconst composeEnhancers = (typeof window !== 'undefined' && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nexport default createStore(rootReducer, composeEnhancers());\n","import { Element } from './store/reducers/types';\n\nexport const elements: Element[] = [\n  {\n    key: 'div-one',\n    type: 'div',\n    children: ['Hello world ', { key: 'inner', type: 'span', children: ['John Doe'] }],\n  }, {\n    key: 'link',\n    type: 'a',\n    href: 'https://google.com',\n    children: ['link'],\n  }, {\n    key: '_1',\n    type: 'br',\n  }, {\n    key: 'button',\n    type: 'button',\n    onClick: {\n      name: 'alert',\n      parameters: {\n        message: 'hello world',\n      },\n    },\n    children: ['click to alert'],\n  }, {\n    key: 'helloworld',\n    type: 'MyComponent',\n    children: ['my component does not take children'],\n  },\n  {\n    key: '_2',\n    type: 'br',\n  },\n  'String can render straight away',\n];\n\nexport default elements;\n","import React from 'react';\n\nconst MyComponent = () => (\n  <>\n    Hello World\n  </>\n);\n\nexport default MyComponent;\n","// eslint-disable-next-line no-alert\nconst alert = ({ message }: { message: string }) => window.alert(message);\n\nexport default alert;\n","import React, { Attributes } from 'react';\nimport {\n  ElementState, ElementNode, TreeNode, Handler,\n} from '../store/reducers/types';\nimport MyComponent from '../components/MyComponent';\nimport alert from '../eventHandlers/alert';\n\nconst mapToHandler: { [name: string]: (parameters: Handler['parameters']) => any } = {\n  [alert.name]: alert,\n};\n\nfunction getAttributesAndProps<P extends {}>(node: ElementNode): Attributes & P {\n  return Object.keys(node)\n    .reduce((attributesAndProps, key) => {\n      if (/^on[A-Z]/.test(key)) {\n        const handler: Handler = node[key];\n        if (mapToHandler[handler.name]) {\n          return {\n            ...attributesAndProps,\n            // TODO: find an elegant way to deal with events\n            [key]: (/* event */) => mapToHandler[handler.name](handler.parameters),\n          };\n        }\n        // eslint-disable-next-line no-console\n        console.warn(`Handler: ${handler.name} not found. Please ensure you have registered the handler function in mapToHandler.`);\n      }\n      return {\n        ...attributesAndProps,\n        [key]: node[key],\n      };\n    }, {} as (Attributes & P));\n}\n\nconst mapToComponent: { [name: string]: () => JSX.Element; } = {\n  [MyComponent.name]: MyComponent,\n};\n\nfunction factory(treeNode: (TreeNode | string), nodeMap: ElementState): JSX.Element | string {\n  if (typeof treeNode === 'string') {\n    return treeNode;\n  }\n  const type = mapToComponent[treeNode.type] || treeNode.type;\n  const attributesAndProps = nodeMap[treeNode.key]\n    ? getAttributesAndProps(nodeMap[treeNode.key]) : null;\n  const children = (treeNode.children || [])\n    .map((child) => factory(child, nodeMap));\n  return React.createElement(type, attributesAndProps, ...children);\n}\n\nexport default factory;\n","import { SET_ELEMENTS, ElementActionTypes, Element } from './types';\n\nexport const setElements = (elements: Element[]): ElementActionTypes => ({\n  type: SET_ELEMENTS,\n  payload: elements,\n});\n\nexport default {\n  setElements,\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { State } from '../store/Store';\nimport {\n  ElementState, Element, TreeState,\n} from '../store/reducers/types';\nimport { elements } from '../mockPage';\nimport factory from './RenderFactory';\nimport { setElements } from '../store/reducers/actions';\n\nexport default function PageLoader() {\n  const [loading, setLoading] = useState(0);\n  const dispatch = useDispatch();\n  const tree = useSelector<State, TreeState>((state) => state.tree);\n  const nodeMap = useSelector<State, ElementState>((state) => state.elements);\n  useEffect(() => {\n    Promise.resolve(elements)\n      .then((result: Element[]) => {\n        dispatch(setElements(result));\n        setLoading(2);\n      })\n      .catch(() => {\n        setLoading(1);\n      });\n  }, [dispatch]);\n  let text: string = '';\n  if (loading === 0) { text = 'Now loading'; }\n  if (loading === 1) { text = 'Load failed'; }\n  return (\n    <>\n      {text}\n      {tree.map((e) => factory(e, nodeMap))}\n    </>\n  );\n}\n","import React from 'react';\nimport {\n  Provider,\n} from 'react-redux';\nimport './App.css';\nimport Store from './store/Store';\n\nimport PageLoader from './pageRenderer/PageLoader';\n\nfunction App() {\n  return (\n    <Provider store={Store}>\n      <PageLoader />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}